from time import sleep

from config import TRASH_PIN_DISTANCE_ECHO, TRASH_PIN_DISTANCE_TRIGGER, TRASH_PIN_MOTION

try:
    from gpiozero import DistanceSensor, MotionSensor, Servo
    from RPLCD.i2c import CharLCD
# Trong tr∆∞·ªùng h·ª£p kh√¥ng th·ªÉ import gpiozero (ch·∫°y m√¥i tr∆∞·ªùng kh√°c Raspberry) s·ª≠ d·ª•ng mock object
except Exception as _:
    from mocks.mock_gpiozero import DistanceSensor, MotionSensor, Servo
    from mocks.mock_lcd import CharLCD


class SmartTrashBin:
    def __init__(self, trigger_distance=2.0, hold_time=5):
        # Thi·∫øt l·∫≠p c√°c ch√¢n c·∫£m bi·∫øn
        # Khai b√°o c·∫£m bi·∫øn si√™u √¢m v·ªõi max_distance v√† threshold_distance
        self.max_range = 4.0
        self.distance_sensor = DistanceSensor(
            echo=TRASH_PIN_DISTANCE_ECHO,
            trigger=TRASH_PIN_DISTANCE_TRIGGER,
            max_distance=self.max_range,
            #threshold_distance=trigger_distance,
            queue_len=5,
            partial=True
        )
        
        self.pir_sensor = MotionSensor(TRASH_PIN_MOTION)

        # Servo ƒëi·ªÅu khi·ªÉn n·∫Øp
        self.lid_servo = Servo(18)

        # LCD hi·ªÉn th·ªã
        self.lcd = CharLCD(cols=16, rows=2)

        # C·∫•u h√¨nh
        self.trigger_distance = trigger_distance  # 2m
        self.hold_time = hold_time

        # Tr·∫°ng th√°i
        self.is_lid_open = False
        self.monitoring = True
        self.person_detection_history = []  # L∆∞u l·ªãch s·ª≠ ph√°t hi·ªán

        # Kh·ªüi t·∫°o
        self._close_lid()
        self._display_status("Thung rac thong minh", "San sang phuc vu")

    def _is_person_nearby(self):
        """
        Ki·ªÉm tra c√≥ NG∆Ø·ªúI g·∫ßn kh√¥ng (s·ª≠ d·ª•ng k·∫øt h·ª£p PIR + distance)
        """
        # Ki·ªÉm tra chuy·ªÉn ƒë·ªông (PIR)
        motion_detected = self.pir_sensor.motion_detected

        # ƒêo kho·∫£ng c√°ch
        distance = self.distance_sensor.distance * self.max_range

        # ƒêi·ªÅu ki·ªán: C√≥ chuy·ªÉn ƒë·ªông AND kho·∫£ng c√°ch <= 2m
        person_nearby = motion_detected and (distance <= self.trigger_distance)

        # L∆∞u l·ªãch s·ª≠ ƒë·ªÉ tr√°nh false positive
        self.person_detection_history.append(person_nearby)
        if len(self.person_detection_history) > 5:  # Ch·ªâ gi·ªØ 5 l·∫ßn ƒëo g·∫ßn nh·∫•t
            self.person_detection_history.pop(0)

        # Reset n·∫øu 5 l·∫ßn ƒë·ªÅu False (kh√¥ng th·∫•y ai)
        if len(self.person_detection_history) == 5 and all(not x for x in self.person_detection_history):
            self.person_detection_history.clear()

        # X√°c nh·∫≠n: √≠t nh·∫•t 3/5 l·∫ßn g·∫ßn ƒë√¢y ph√°t hi·ªán ng∆∞·ªùi
        confirmed_detection = sum(self.person_detection_history) >= 3

        return confirmed_detection, distance, motion_detected

    def _open_lid(self):
        """M·ªü n·∫Øp th√πng r√°c"""
        if not self.is_lid_open:
            self.lid_servo.max()
            self.is_lid_open = True
            self.person_detection_history.clear()
            self._display_status("Chao ban!", "Hay bo rac vao")
            print("N·∫Øp th√πng r√°c M·ªû - Ph√°t hi·ªán NG∆Ø·ªúI")

    def _close_lid(self):
        """ƒê√≥ng n·∫Øp th√πng r√°c"""
        if self.is_lid_open:
            self.lid_servo.min()
            self.is_lid_open = False
            self._display_status("Cam on ban!", "Hen gap lai")
            print("N·∫Øp th√πng r√°c ƒê√ìNG")

    def _display_status(self, line1, line2=""):
        """Hi·ªÉn th·ªã tr·∫°ng th√°i"""
        self.lcd.clear()
        self.lcd.cursor_pos = (0, 0)
        self.lcd.write_string(line1[:16])
        if line2:
            self.lcd.cursor_pos = (1, 0)
            self.lcd.write_string(line2[:16])

    def _display_debug_info(self, distance, motion, person_confirmed):
        """Hi·ªÉn th·ªã th√¥ng tin debug"""
        motion_icon = "üë§" if motion else "‚ùå"
        distance_status = f"{distance:.1f}m"
        person_status = "NG∆Ø·ªúI" if person_confirmed else "V·∫¨T TH·ªÇ"

        print(
            f"{motion_icon} Chuy·ªÉn ƒë·ªông: {motion} | üìè Kho·∫£ng c√°ch: {distance_status} | üéØ K·∫øt lu·∫≠n: {person_status}"
        )

    def run(self):
        """K√≠ch ho·∫°t ch·∫°y c·∫£m bi·∫øn th√πng r√°c ƒë√≥ng/m·ªü"""
        print("Th√πng r√°c th√¥ng minh (PIR + Si√™u √¢m) ƒë√£ kh·ªüi ƒë·ªông!")
        print(f"Kho·∫£ng c√°ch k√≠ch ho·∫°t: {self.trigger_distance}m")
        print("Ch·ªâ m·ªü n·∫Øp khi ph√°t hi·ªán NG∆Ø·ªúI (kh√¥ng ph·∫£i v·∫≠t th·ªÉ)")

        no_person_time = 0

        try:
            while self.monitoring:
                person_nearby, distance, motion = self._is_person_nearby()

                # Debug info
                self._display_debug_info(distance, motion, person_nearby)

                if person_nearby:
                    # C√≥ ng∆∞·ªùi g·∫ßn -> m·ªü n·∫Øp
                    if not self.is_lid_open:
                        self._open_lid()
                    no_person_time = 0  # Reset timer

                else:
                    # Kh√¥ng c√≥ ng∆∞·ªùi
                    if self.is_lid_open:
                        no_person_time += 0.5
                        remaining_time = self.hold_time - no_person_time

                        if remaining_time > 0:
                            self._display_status(
                                "Dang dong nap...", f"Con {remaining_time:.0f}s"
                            )
                        else:
                            self._close_lid()
                            no_person_time = 0
                    else:
                        self._display_status(
                            "Cho nguoi den...", f"Pham vi: {self.trigger_distance}m"
                        )

                sleep(0.5)

        except KeyboardInterrupt:
            # N·∫øu b·∫•m ph√≠m g√¨ ƒë√≥ th√¨ t·∫Øt th√πng r√°c
            # TODO: Tri·ªÉn khai c√¥ng t·∫Øc ƒë√≥ng/m·ªü
            self.stop()

    def stop(self):
        """D·ª´ng ho·∫°t ƒë·ªông"""
        self.monitoring = False
        self._close_lid()
        self._display_status("Da tam dung")
        print("\nTh√πng r√°c ƒë√£ d·ª´ng")


if __name__ == "__main__":
    trash_bin = SmartTrashBin(trigger_distance=2.0, hold_time=5)
    trash_bin.run()
